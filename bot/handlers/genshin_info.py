from typing import Optional

from loguru import logger
from vkbottle import Callback, GroupEventType, Keyboard
from vkbottle import KeyboardButtonColor as Color
from vkbottle import ShowSnackbarEvent
from vkbottle.bot import BotLabeler, Message, MessageEvent, rules
from vkbottle.http import AiohttpClient

import create_pool
from utils import (
    get_avatar_data, get_player_info, get_textmap, resolve_id, resolve_map_hash
)
from variables import FAV_AVATARS

bl = BotLabeler()
bl.vbml_ignore_case = True

http_client = AiohttpClient()


async def generate_avatars_kbd(from_id, UID, show_avatars):
    avatar_data = await get_avatar_data()
    textmap = await get_textmap()

    keyboard = Keyboard(inline=True)
    item_kbd = 0
    for avatar in show_avatars:
        avatar_show_info = resolve_id(avatar.avatar_id, avatar_data)

        item_kbd += 1
        if item_kbd > 1:
            keyboard.row()
            item_kbd = 0

        avatar_name_text = resolve_map_hash(textmap, avatar_show_info["nameTextMapHash"])
        color = Color.SECONDARY
        if avatar.level >= 90:
            color = Color.PRIMARY
        else:
            avatar_name_text += f" (–£—Ä. {avatar.level})"

        if avatar.avatar_id == 10000046:
            color = Color.POSITIVE

        avatar_kbd_text = Callback(
            avatar_name_text,
            payload={
                "caller_id": from_id,
                "uid": UID,
                "avatar_id": avatar.avatar_id,
                "avatar_name": avatar_name_text,
            },
        )

        keyboard.add(avatar_kbd_text, color)
    return keyboard.get_json()


@bl.message(
    text=("!–≥–µ–Ω—à–∏–Ω –∏–Ω—Ñ–æ", "!–≥–µ–Ω—à–∏–Ω –∏–Ω—Ñ–æ <UID:int>", "! –≥–µ–Ω—à–∏–Ω –∏–Ω—Ñ–æ", " ! –≥–µ–Ω—à–∏–Ω –∏–Ω—Ñ–æ <UID:int>")
)
async def genshin_info(message: Message, UID: Optional[int] = None):
    info_msg = ""

    if UID is None:
        pool = create_pool.pool
        async with pool.acquire() as pool:
            if message.reply_message is None:
                UID = await pool.fetchrow(
                    "SELECT uid FROM players WHERE user_id=$1 AND peer_id=$2",
                    message.from_id,
                    message.peer_id,
                )

                if UID is None or UID["uid"] is None:
                    return (
                        "–í—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–≤–æ–π UID! "
                        '–ï–≥–æ –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã "!—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–π–¥–∏ <UID>"'
                    )
            else:
                UID = await pool.fetchrow(
                    "SELECT uid FROM players WHERE user_id=$1 AND peer_id=$2",
                    message.reply_message.from_id,
                    message.peer_id,
                )

                if UID is None or UID["uid"] is None:
                    return (
                        "–ß–µ–ª–æ–≤–µ–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏, –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª –∞–∫–∫–∞—É–Ω—Ç "
                        "/ –Ω–µ —É–∫–∞–∑–∞–ª –∞–π–¥–∏, –æ–¥–Ω–∞–∫–æ –æ–Ω –º–æ–∂–µ—Ç —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –Ω–∞–ø–∏—Å–∞–≤ "
                        '"!—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–π–¥–∏ <UID>"'
                    )
                info_msg += (
                    f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ [id{message.reply_message.from_id}|—ç—Ç–æ–≥–æ] –∏–≥—Ä–æ–∫–∞\n\n"
                )

            UID = UID["uid"]

    try:
        player_info = (await get_player_info(http_client, UID, only_info=True)).player_info
    except Exception as e:
        logger.error(e)
        return (
            "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Å–µ—Ä–≤–∏—Å enka.network —Å–µ–π—á–∞—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n"
            "–ï—Å–ª–∏ –∂–µ —ç—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–π –æ—à–∏–±–∫–µ [id322615766|–º–Ω–µ]"
        )

    if not player_info:
        if UID is None:
            return (
                "–≠—ç—ç—ç... –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º UID –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏, "
                "–ø–æ—Ö–æ–∂–µ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –≤ –≥–µ–Ω—à–∏–Ω–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω/—É–¥–∞–ª–µ–Ω\n"
                "(–∏–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ enka.network)"
            )
        else:
            return "–ò–≥—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º UID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"

    nickname = player_info.nickname or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    adv_rank = player_info.level or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    signature = player_info.signature or "–Ω–µ—Ç—É"
    world_level = player_info.world_level or "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
    profile_picture = player_info.profile_picture.avatar_id or 0
    show_avatars = player_info.show_avatar_info_list or None

    avatar_data = await get_avatar_data()
    textmap = await get_textmap()
    avatar_picture_info = resolve_id(profile_picture, avatar_data)
    avatar_picture_name = resolve_map_hash(textmap, avatar_picture_info["nameTextMapHash"])

    keyboard = None
    if show_avatars is not None and len(show_avatars) > 0:
        keyboard = await generate_avatars_kbd(message.from_id, UID, show_avatars)

    info_msg += f"–ê–π–¥–∏ –≤ Genshin Impact: {UID}\n–ù–∏–∫: {nickname}\n"

    if profile_picture in FAV_AVATARS:
        info_msg += f"{avatar_picture_name} –Ω–∞ –∞–≤–µ, –∑–¥–æ—Ä–æ–≤—å—è –º–∞–º–µ\n\n"
    elif avatar_picture_name is None:
        info_msg += "–ù–∞ –∞–≤–∞—Ç–∞—Ä–∫–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç—É (–∫–∞–∫ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ?)"
    else:
        info_msg += f"{avatar_picture_name} –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫–µ\n\n"

    info_msg += (
        f"–†–∞–Ω–≥ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π: {adv_rank}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {signature}\n"
        f"–£—Ä–æ–≤–µ–Ω—å –º–∏—Ä–∞: {world_level}\n\n"
        f"–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: https://enka.network/u/{UID}"
    )

    await message.answer(info_msg, keyboard=keyboard)


# https://api.enka.network/#/api?id=fightprop
FIGHT_PROP_NAMES = {
    '2000': 1377450402,  # HP
    '2001': 1756301290,  # ATK
    '2002': 3591287138,  # DEF
    '28': 3421163681,    # Elemental Mastery
    '20': 1916797986,    # CRIT Rate
    '22': 4137936461,    # CRIT DMG
    '26': 3911103831,    # Heal Bonus
    '23': 1735465728,    # Energy Recharge
    '30': 3763864883,    # Physical DMG Bonus
    '40': 999734248,     # Pyro DMG Bonus
    '41': 3514877774,    # Electro DMG Bonus
    '42': 3619239513,    # Hydro DMG Bonus
    '43': 1824382851,    # Dendro DMG Bonus
    '44': 312842903,     # Anemo DMG Bonus
    '45': 2557985416,    # Geo DMG Bonus
    '46': 4054347456,    # Cryo DMG Bonus
}
FIGHT_PROP_EMOJIS = {
    '2000': 'üíñ',
    '2001': '‚öîÔ∏è',
    '2002': 'üõ°Ô∏è',
    '20': 'üí•',
    '22': 'üó°Ô∏è',
    '23': '‚ö°',
    '26': 'üíä',
    '28': 'üåÄ',
    '30': 'üî•',
    '40': 'üî•',
    '41': '‚ö°',
    '42': 'üíß',
    '43': 'üå≥',
    '44': 'üí®',
    '45': 'ü™®',
    '46': '‚ùÑÔ∏è',
}
FIGHT_PROP_DECIMAL = (
    '20', '22', '23', '26', '30', '40', '41', '42', '43', '44', '45', '46'
)


@bl.raw_event(
    GroupEventType.MESSAGE_EVENT,
    MessageEvent,
    rules.PayloadMapRule([
        ("caller_id", int), ("uid", int), ("avatar_id", int), ("avatar_name", str)
    ]),
)
async def show_avatar_info(event: MessageEvent):
    payload = event.get_payload_json()
    caller_id = payload['caller_id']
    if caller_id != event.object.user_id:
        await event.ctx_api.messages.send_message_event_answer(
            event_id=event.object.event_id,
            user_id=event.object.user_id,
            peer_id=event.object.peer_id,
            event_data=ShowSnackbarEvent(
                text="–ù–µ–∞! –¢–æ–ª—å–∫–æ –≤—ã–∑—ã–≤–∞—é—â–∏–π —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç —É–≤–∏–¥–µ—Ç—å –±–∏–ª–¥ —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
            ).json(),
        )
        return

    uid = payload['uid']
    avatar_id = payload['avatar_id']
    avatar_name = payload['avatar_name']
    try:
        player_info = await get_player_info(http_client, uid)
    except Exception as e:
        logger.error(e)
        await event.edit_message(
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ"
        )
        return

    msg = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ {avatar_name} –∏–≥—Ä–æ–∫–∞ {uid}:\n"
    avatars_info = player_info.avatar_info_list
    if avatars_info is None:
        await event.edit_message(
            "–£ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã –ø–æ–¥—Ä–æ–±–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"
        )
        return
    for avatar in avatars_info:
        if avatar.avatar_id == avatar_id:
            break
    fight_prop_map = avatar.fight_prop_map
    fight_prop_map = {k: v for k, v in fight_prop_map.items() if v > 0}

    textmap = await get_textmap()
    for k, v in FIGHT_PROP_NAMES.items():
        if k not in fight_prop_map:
            continue

        fight_prop_val = fight_prop_map.get(k)
        if k in FIGHT_PROP_DECIMAL:
            fight_prop_val = round(fight_prop_val * 100, 1)
        else:
            fight_prop_val = round(fight_prop_val)

        emoji = ''
        if k in FIGHT_PROP_EMOJIS:
            emoji = FIGHT_PROP_EMOJIS[k] + ' | '

        msg += f"{emoji}{resolve_map_hash(textmap, v)}: {fight_prop_val}\n"

    # We use `copy()` since `get_player_info()` is cached, if we change
    # `show_avatar_info_list` without using `copy()`, then
    # `player_info.player_info.show_avatar_info_list` will also change
    # and will be returned every time we call `get_player_info()`
    show_avatar_info_list = player_info.player_info.show_avatar_info_list.copy()
    logger.info(show_avatar_info_list)
    for avatar in show_avatar_info_list:
        if avatar.avatar_id == avatar_id:
            show_avatar_info_list.remove(avatar)
            break

    keyboard = await generate_avatars_kbd(
        caller_id, uid, show_avatar_info_list
    )
    await event.edit_message(msg, keyboard=keyboard)
